import '../pages/settings/sub_rules_page.dart';
import 'package:flutter/material.dart'; import 'package:flutter_riverpod/flutter_riverpod.dart'; import 'package:go_router/go_router.dart'; import 'package:shared_preferences/shared_preferences.dart';  import '../pages/onboarding/onboarding_page.dart'; import '../pages/home/home_page.dart'; import '../pages/plan/plan_page.dart'; import '../pages/shopping/shopping_list_page.dart'; import '../pages/pantry/pantry_page.dart'; import '../pages/settings/settings_page.dart'; import '../pages/settings/taste_profile_page.dart'; import '../pages/settings/store_profiles_page.dart'; import '../pages/settings/budget_settings_page.dart'; import '../pages/recipes/recipe_details_page.dart'; import '../pages/pricing/price_history_page.dart'; import '../pages/import/import_recipe_page.dart'; import '../pages/batch/batch_hub_page.dart'; import '../pages/batch/batch_session_details_page.dart'; import '../providers/database_providers.dart'; import '../pages/periodization/phase_planner_page.dart'; import '../pages/multiweek/multiweek_hub_page.dart'; import '../pages/multiweek/multiweek_series_page.dart';  /// SharedPreferences flag for onboarding completion (v1) const kOnboardingDone = 'onboarding.done.v1';  /// Provider for the app router configuration final appRouterProvider = Provider<GoRouter>((ref) {   final prefs = ref.watch(sharedPreferencesProvider);    // Gate only the default start; deep links remain unaffected.   final bool doneNew = prefs.getBool(kOnboardingDone) ?? false;   final bool doneLegacy = prefs.getBool('onboarding_completed') ?? false;   final initial = (doneNew || doneLegacy)       ? AppRouter.home       : AppRouter.onboarding;    return GoRouter(     initialLocation: initial,     debugLogDiagnostics: true,     routes: AppRouter._routes,   ); });  /// App router configuration using go_router class AppRouter {   static const String onboarding = '/onboarding';   static const String home = '/';   static const String plan = '/plan';   static const String multiweek = '/multiweek';   static const String multiweekSeries = '/multiweek/:id';   static const String shoppingList = '/shopping-list';   static const String pantry = '/pantry';   static const String priceHistory = '/pricing/history';   static const String settings = '/settings';   static const String tasteSettings = '/settings/taste';   static const String substitutionSettings = '/settings/substitutions';   static const String budgetSettings = '/settings/budget';   static const String storeProfiles = '/settings/store-profiles';   static const String recipeDetails = '/recipe/:id';   static const String importRecipe = '/import';   static const String batch = '/batch';   static const String batchDetails = '/batch/:id';   static const String periodization = '/periodization';    static final List<GoRoute> _routes = [     GoRoute(       path: onboarding,       name: 'onboarding',       pageBuilder: (context, state) => MaterialPage<void>(         key: state.pageKey,         child: const OnboardingPage(),       ),     ),     GoRoute(       path: home,       name: 'home',       pageBuilder: (context, state) => MaterialPage<void>(         key: state.pageKey,         child: const HomePage(),       ),     ),     GoRoute(       path: plan,       name: 'plan',       pageBuilder: (context, state) => MaterialPage<void>(         key: state.pageKey,         // Allow optional planId via query param: /plan?id=...         child: PlanPage(planId: state.uri.queryParameters['id']),       ),     ),     GoRoute(       path: priceHistory,       name: 'price-history',       pageBuilder: (context, state) => MaterialPage<void>(         key: state.pageKey,         child: const PriceHistoryPage(),       ),     ),     GoRoute(       path: multiweek,       name: 'multiweek',       pageBuilder: (context, state) => MaterialPage<void>(         key: state.pageKey,         child: const MultiweekHubPage(),       ),     ),     GoRoute(       path: multiweekSeries,       name: 'multiweek-series',       pageBuilder: (context, state) => MaterialPage<void>(         key: state.pageKey,         child: MultiweekSeriesPage(seriesId: state.pathParameters['id']!),       ),     ),     GoRoute(       path: shoppingList,       name: 'shopping-list',       pageBuilder: (context, state) => MaterialPage<void>(         key: state.pageKey,         child: const ShoppingListPage(),       ),     ),     GoRoute(       path: pantry,       name: 'pantry',       pageBuilder: (context, state) => MaterialPage<void>(         key: state.pageKey,         child: const PantryPage(),       ),     ),     GoRoute(       path: settings,       name: 'settings',       pageBuilder: (context, state) => MaterialPage<void>(         key: state.pageKey,         child: const SettingsPage(),       ),     ),     GoRoute(       path: substitutionSettings,       name: 'settings-substitutions',       pageBuilder: (context, state) => MaterialPage<void>(         key: state.pageKey,         child: const SubRulesPage(),       ),     ),     GoRoute(       path: budgetSettings,       name: 'settings-budget',       pageBuilder: (context, state) => MaterialPage<void>(         key: state.pageKey,         child: const BudgetSettingsPage(),       ),     ),     GoRoute(       path: tasteSettings,       name: 'settings-taste',       pageBuilder: (context, state) => MaterialPage<void>(         key: state.pageKey,         child: const TasteProfilePage(),       ),     ),     GoRoute(       path: storeProfiles,       name: 'store-profiles',       pageBuilder: (context, state) => MaterialPage<void>(         key: state.pageKey,         child: const StoreProfilesPage(),       ),     ),     GoRoute(       path: recipeDetails,       name: 'recipe-details',       pageBuilder: (context, state) => MaterialPage<void>(         key: state.pageKey,         child: RecipeDetailsPage(           recipeId: state.pathParameters['id']!,         ),       ),     ),     GoRoute(       path: importRecipe,       name: 'import-recipe',       pageBuilder: (context, state) => MaterialPage<void>(         key: state.pageKey,         child: const ImportRecipePage(),       ),     ),     GoRoute(       path: batch,       name: 'batch',       pageBuilder: (context, state) => MaterialPage<void>(         key: state.pageKey,         child: const BatchHubPage(),       ),     ),     GoRoute(       path: batchDetails,       name: 'batch-details',       pageBuilder: (context, state) => MaterialPage<void>(         key: state.pageKey,         child: BatchSessionDetailsPage(sessionId: state.pathParameters['id']!),       ),     ),     GoRoute(       path: periodization,       name: 'periodization',       pageBuilder: (context, state) => MaterialPage<void>(         key: state.pageKey,         child: const PhasePlannerPage(),       ),     ),   ]; }
